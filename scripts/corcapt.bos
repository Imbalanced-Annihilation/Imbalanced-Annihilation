#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flareg, flared, baseb, ground, pelvis, lforeleg, rforeleg, lhindleg, rhindleg, nano,
       nano2, beam, haut, canong, canond;

static-var  nanoTime, restore_delay, Static_Var_2, gun_1, bMoving, Static_Var_5,
            Static_Var_6, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_BUILD	2
#define SPEED_KOEF	1.7

walk()
{
	if( TRUE )
	{
		move rforeleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		move rhindleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		move lforeleg to z-axis [-1.000000] speed [10.000000] * SPEED_KOEF;
		turn baseb to x-axis <5.000000> speed <150.000000> * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		turn baseb to x-axis <0.000000> speed <75.000000> * SPEED_KOEF;
		move rforeleg to z-axis [2.000000] speed [10.000000] * SPEED_KOEF;
		move rhindleg to z-axis [0.000000] speed [10.000000] * SPEED_KOEF;
		move lhindleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		move rforeleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		move lhindleg to z-axis [2.000000] speed [10.000000] * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		move rforeleg to z-axis [0.000000] speed [10.000000] * SPEED_KOEF;
		move lhindleg to z-axis [3.000000] speed [10.000000] * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		move rforeleg to z-axis [-1.000000] speed [10.000000] * SPEED_KOEF;
		move lforeleg to z-axis [0.000000] speed [10.000000] * SPEED_KOEF;
		move lhindleg to z-axis [2.000000] speed [10.000000] * SPEED_KOEF;
		turn baseb to x-axis <5.000000> speed <150.000000> * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		turn baseb to x-axis <0.000000> speed <75.000000> * SPEED_KOEF;
		move rhindleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		move lforeleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		move lhindleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		move rhindleg to z-axis [2.000000] speed [10.000000] * SPEED_KOEF;
		move lforeleg to z-axis [2.000000] speed [10.000000] * SPEED_KOEF;
		move lhindleg to z-axis [0.000000] speed [10.000000] * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		move rhindleg to z-axis [3.000000] speed [10.000000] * SPEED_KOEF;
		move lforeleg to z-axis [1.000000] speed [10.000000] * SPEED_KOEF;
		sleep 150;
	}
	if( TRUE )
	{
		move rforeleg to z-axis [0.000000] speed [10.000000] * SPEED_KOEF;
		move lforeleg to z-axis [0.000000] speed [10.000000] * SPEED_KOEF;
		sleep 150;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

stand()
{
	if( TRUE )
	{
		move lforeleg to z-axis [0.000000] speed [10.000000];
		move rforeleg to z-axis [0.000000] speed [10.000000];
		move lhindleg to z-axis [0.000000] speed [10.000000];
		move rhindleg to z-axis [0.000000] speed [10.000000];
	}
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from baseb;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		Func_Var_2 = Static_Var_5;
		if( Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				Static_Var_6 = 1;
				//call-script walklegs();
				call-script walk();
			}
			if( !Func_Var_2 )
			{
				Static_Var_6 = 0;
				call-script walk();
			}
		}
		if( !Func_Var_1 )
		{
			Static_Var_6 = 1;
			call-script stand();
		}
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	Static_Var_5 = 0;
	Static_Var_6 = 1;
	gun_1 = ground;
	Static_Var_2 = 0;
	nanoTime = 0;
	call-script InitState();
	start-script MotionControl();
	start-script SmokeUnit();
	restore_delay = 1500;
	hide flareg;
	hide flared;
	hide nano2;
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;
	turn baseb to y-axis heading speed <150.000000>;
	wait-for-turn baseb around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set-signal-mask SIG_BUILD;
	turn baseb to y-axis <0.000000> speed <150.000000>;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryNanoPiece(piecenum)
{
	piecenum = nanoTime;
	nanoTime = !nanoTime;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn haut to y-axis <0.000000> speed <100.000000>;
	turn canong to x-axis <0.000000> speed <100.000000>;
	turn canond to x-axis <0.000000> speed <100.000000>;
}

SweetSpot(piecenum)
{
	piecenum = baseb;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode haut type BITMAPONLY | BITMAP2;
		explode lforeleg type BITMAPONLY | BITMAP3;
		explode beam type BITMAPONLY | BITMAP4;
		explode lhindleg type BITMAPONLY | BITMAP5;
		explode nano type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pelvis type BITMAPONLY | BITMAP4;
		explode canond type BITMAPONLY | BITMAP5;
		explode rforeleg type BITMAPONLY | BITMAP1;
		explode canong type BITMAPONLY | BITMAP2;
		explode rhindleg type BITMAPONLY | BITMAP3;
		explode baseb type BITMAPONLY | BITMAP2;
		explode flareg type BITMAPONLY | BITMAP4;
		explode flared type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode haut type FALL | BITMAP2;
		explode lforeleg type FALL | BITMAP3;
		explode beam type FALL | BITMAP4;
		explode lhindleg type FALL | BITMAP5;
		explode nano type FALL | BITMAP2;
		explode nano2 type FALL | BITMAP3;
		explode pelvis type FALL | BITMAP4;
		explode canond type FALL | BITMAP5;
		explode rforeleg type FALL | BITMAP1;
		explode canong type FALL | BITMAP2;
		explode rhindleg type FALL | BITMAP3;
		explode baseb type SHATTER | BITMAP2;
		explode flareg type BITMAPONLY | BITMAP4;
		explode flared type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode haut type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode canond type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode canong type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode baseb type SHATTER | BITMAP2;
		explode flareg type BITMAPONLY | BITMAP4;
		explode flared type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode haut type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode canond type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rforeleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode canong type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rhindleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode baseb type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode flareg type BITMAPONLY | BITMAP4;
	explode flared type BITMAPONLY | BITMAP5;
}
