#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, rfwheel, lfwheel, rbwheel, lbwheel, back, lift, turretb,
       hoist, turret, lholder, lmissile, rholder, rmissile, ldoor, rdoor;

static-var  ReloadTime, Static_Var_1, Static_Var_3, Static_Var_4, Static_Var_5,
            bChangingState, bReloading, bPopped, Static_Var_8, Static_Var_9;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	ReloadTime = 5000;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	bChangingState = FALSE;
	bPopped = FALSE;
	bReloading = FALSE;
	start-script SmokeUnit();
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	Static_Var_8 = get HEALTH;
	if( Static_Var_8 <= Static_Var_9 - 2 )
	{
		turn base to z-axis Func_Var_2 speed <105.000000>;
		turn base to x-axis Func_Var_1 speed <105.000000>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
		turn base to z-axis <0.000000> speed <30.000000>;
		turn base to x-axis <0.000000> speed <30.000000>;
	}
	Static_Var_9 = get HEALTH;
}

StartMoving()
{
	spin rfwheel around x-axis speed <600.000000> accelerate <200.000000>;
	spin lfwheel around x-axis speed <600.000000> accelerate <200.000000>;
	spin rbwheel around x-axis speed <400.000000> accelerate <200.000000>;
	spin lbwheel around x-axis speed <400.000000> accelerate <200.000000>;
}

StopMoving()
{
	stop-spin rfwheel around x-axis;
	stop-spin lfwheel around x-axis;
	stop-spin rbwheel around x-axis;
	stop-spin lbwheel around x-axis;
}

Popup()
{
	while (bChangingState)
	{
		sleep 100;
	}
	if (bPopped == FALSE)
	{
	bChangingState = TRUE;
	turn ldoor to z-axis <-10.000000> speed <280.000000>;
	turn rdoor to z-axis <10.000000> speed <280.000000>;
	turn ldoor to z-axis <-50.000000> speed <1260.000000>;
	turn rdoor to z-axis <50.000000> speed <1260.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-80.000000> speed <1120.000000>;
	turn rdoor to z-axis <80.000000> speed <1120.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-84.000000> speed <840.000000>;
	turn rdoor to z-axis <84.000000> speed <840.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-88.000000> speed <280.000000>;
	turn rdoor to z-axis <88.000000> speed <280.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-90.000000> speed <112.000000>;
	turn rdoor to z-axis <90.000000> speed <112.000000>;
	wait-for-turn rdoor around z-axis;
	move ldoor to y-axis [-3.000000] speed [84.000000];
	move rdoor to y-axis [-3.000000] speed [84.000000];
	wait-for-move rdoor along y-axis;
	move lift to y-axis [2.000000] speed [56.000000];
	wait-for-move lift along y-axis;
	move turretb to y-axis [1.000000] speed [28.000000];
	wait-for-move turretb along y-axis;
	bChangingState = FALSE;
	bPopped = TRUE;
	}
}

Fold()
{
	while (bChangingState)
	{
		sleep 100;
	}
	if (bPopped)
	{
	bChangingState = TRUE;
	turn turret to y-axis <0.000000> speed <140.000000>;
	turn hoist to x-axis <0.000000> speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn hoist around x-axis;
	move lift to y-axis [0.000000] speed [7.000000];
	wait-for-move lift along y-axis;
	move turretb to y-axis [0.000000] speed [7.000000];
	move ldoor to y-axis [0.000000] speed [14.000000];
	move rdoor to y-axis [0.000000] speed [14.000000];
	wait-for-move rdoor along y-axis;
	turn ldoor to z-axis <-80.000000> speed <105.000000>;
	turn rdoor to z-axis <80.000000> speed <105.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-70.000000> speed <168.000000>;
	turn rdoor to z-axis <70.000000> speed <168.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-50.000000> speed <245.000000>;
	turn rdoor to z-axis <50.000000> speed <245.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-20.000000> speed <385.000000>;
	turn rdoor to z-axis <20.000000> speed <385.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-10.000000> speed <210.000000>;
	turn rdoor to z-axis <10.000000> speed <210.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <-4.000000> speed <70.000000>;
	turn rdoor to z-axis <4.000000> speed <70.000000>;
	wait-for-turn rdoor around z-axis;
	turn ldoor to z-axis <0.000000> speed <42.000000>;
	turn rdoor to z-axis <0.000000> speed <42.000000>;
	wait-for-turn rdoor around z-axis;
	bChangingState = FALSE;
	bPopped = FALSE;
	show lmissile;
	show rmissile;
	}
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep 3000;
	if (bReloading == FALSE AND bChangingState == FALSE)
	{
		start-script Fold();
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	//if( gun_1 == 1 )
	//{
		//piecenum = rmissile;
		//return (0);
	//}
	//if( gun_1 == 2 )
	//{
		//piecenum = lmissile;
		//return (0);
	//}
	piecenum = hoist;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = hoist;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bReloading = FALSE;
	start-script Popup();
	while (bPopped == FALSE)
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <480.000000>;
	turn hoist to x-axis <0.000000> - pitch speed <140.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn hoist around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide lmissile;
	hide rmissile;
	bReloading = TRUE;
	start-script Fold();
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode rfwheel type BITMAPONLY | BITMAP1;
		explode lfwheel type BITMAPONLY | BITMAP1;
		explode rbwheel type BITMAPONLY | BITMAP1;
		explode lbwheel type BITMAPONLY | BITMAP1;
		explode back type BITMAPONLY | BITMAP1;
		explode lift type BITMAPONLY | BITMAP1;
		explode turretb type BITMAPONLY | BITMAP1;
		explode hoist type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		explode lholder type BITMAPONLY | BITMAP1;
		explode lmissile type BITMAPONLY | BITMAP1;
		explode rholder type BITMAPONLY | BITMAP1;
		explode rmissile type BITMAPONLY | BITMAP1;
		explode ldoor type BITMAPONLY | BITMAP1;
		explode rdoor type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode rfwheel type SHATTER | BITMAP4;
		explode lfwheel type SHATTER | BITMAP4;
		explode rbwheel type SHATTER | BITMAP4;
		explode lbwheel type SHATTER | BITMAP4;
		explode back type SHATTER | BITMAP4;
		explode lift type SHATTER | BITMAP4;
		explode turretb type SHATTER | BITMAP4;
		explode hoist type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		explode lholder type SHATTER | BITMAP4;
		explode lmissile type SHATTER | BITMAP4;
		explode rholder type SHATTER | BITMAP4;
		explode rmissile type SHATTER | BITMAP4;
		explode ldoor type SHATTER | BITMAP4;
		explode rdoor type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode rfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rbwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lbwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode back type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lift type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode hoist type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lmissile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rmissile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode ldoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rdoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode rfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lfwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rbwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lbwheel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode back type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lift type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode hoist type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lmissile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rholder type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rmissile type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode ldoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rdoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
