#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wing1, wing2, sect1, sect2, sect2b, sect1b, emit,
       wake1, wake2, wake3, wake4, gun, jets, intakes, left,
       right;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Go()
{
	turn wing1 to z-axis <0.000000> speed <120.000000>;
	turn wing2 to z-axis <0.000000> speed <120.000000>;
	move base to y-axis [0.000000] speed [1.700000];
	sleep 300;
}

Stop()
{
	turn wing1 to z-axis <-40.005495> speed <120.000000>;
	turn wing2 to z-axis <40.005495> speed <120.000000>;
	move base to y-axis [3.170000] speed [9.370000];
	sleep 300;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	move base to y-axis [3.170000] now;
	turn wing1 to z-axis <-40.005495> now;
	turn wing2 to z-axis <40.005495> now;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_3 == 3 )
		{
			emit-sfx 259 from wake1;
			emit-sfx 259 from wake2;
			emit-sfx 259 from wake3;
			emit-sfx 259 from wake4;
			emit-sfx 259 from wing1;
			emit-sfx 259 from wing2;
			emit-sfx 259 from base;
		}
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
}

Positionguna()
{
	if( Static_Var_2 == 1 )
	{
		turn gun to z-axis <0.000000> speed <400.000000>;
	}
	if( Static_Var_2 == 2 )
	{
		turn gun to z-axis <120.027473> speed <400.000000>;
	}
	if( Static_Var_2 == 3 )
	{
		turn gun to z-axis <0.000000> - <0.659341> speed <400.000000>;
	}
	wait-for-turn gun around z-axis;
}

QueryPrimary(piecenum)
{
	piecenum = emit;
}

AimPrimary()
{
	return (1);
}

FirePrimary()
{
	move gun to z-axis [-3.000000] speed [500.000000];
	sleep 150;
	move gun to z-axis [0.000000] speed [6.000000];
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type BITMAPONLY | BITMAP2;
		explode wing2 type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode sect1 type BITMAPONLY | BITMAP5;
		explode sect1b type BITMAPONLY | BITMAP1;
		explode sect2 type BITMAPONLY | BITMAP2;
		explode sect2b type BITMAPONLY | BITMAP3;
		explode jets type BITMAPONLY | BITMAP4;
		explode intakes type BITMAPONLY | BITMAP2;
		explode left type BITMAPONLY | BITMAP3;
		explode right type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type FALL | BITMAP2;
		explode wing2 type FALL | BITMAP3;
		explode gun type FALL | BITMAP4;
		explode sect1 type FALL | BITMAP5;
		explode sect1b type FALL | BITMAP1;
		explode sect2 type FALL | BITMAP2;
		explode sect2b type FALL | BITMAP3;
		explode jets type BITMAPONLY | BITMAP4;
		explode intakes type BITMAPONLY | BITMAP2;
		explode left type BITMAPONLY | BITMAP3;
		explode right type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode wing1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wing2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode gun type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode sect1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode sect1b type BITMAPONLY | BITMAP1;
		explode sect2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode sect2b type BITMAPONLY | BITMAP3;
		explode jets type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode intakes type BITMAPONLY | BITMAP2;
		explode left type BITMAPONLY | BITMAP3;
		explode right type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode wing1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode wing2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode sect1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode sect1b type SHATTER | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sect2 type FALL | EXPLODE_ON_HIT | BITMAP3;
	explode sect2b type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode jets type FALL | EXPLODE_ON_HIT | BITMAP2;
	explode intakes type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode left type BITMAPONLY | BITMAP3;
	explode right type BITMAPONLY | BITMAP3;
}
