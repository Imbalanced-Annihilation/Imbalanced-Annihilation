#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hip, upperleg2, middleleg1, middleleg2, lowerleg1, foot1, upperleg1,
       lowerleg2, foot2, body, arms, Guncase1, barrel1, barrel2, firepoint1,
       rflare, Guncase2, firepoint2, lflare, wreck1, wreck2, wreck3;

static-var  bMoving, bAiming, Static_Var_3, Static_Var_4, gun_1,
            gun_2, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8

#define SPEED_KOEF 2

walk_1()
{
	if( Static_Var_8 < 3 )
	{
		if( Static_Var_9 < 41 AND Static_Var_9 )
		{
			explode wreck2 type FALL;
		}
	}
	if( bMoving )
	{
		turn upperleg1 to x-axis <-10.000000> speed <100.000000> * SPEED_KOEF;
		turn middleleg1 to x-axis <15.000000> speed <50.000000> * SPEED_KOEF;
		turn upperleg2 to x-axis <35.005495> speed <100.000000> * SPEED_KOEF;
		turn middleleg2 to x-axis <0.000000> speed <50.000000> * SPEED_KOEF;
		sleep 250 / SPEED_KOEF;
		move hip to y-axis [0.000000] speed [4.000000] * SPEED_KOEF;
		sleep 200 / SPEED_KOEF;
		move hip to y-axis [2.000000] speed [4.000000] * SPEED_KOEF;
		turn hip to z-axis <2.000000> speed <16.000000> * SPEED_KOEF;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walk_2()
{
	if( Static_Var_8 < 3 )
	{
		if( Static_Var_9 < 21 )
		{
			explode wreck1 type FALL;
			explode wreck3 type FALL;
		}
	}
	if( bMoving )
	{
		turn upperleg1 to x-axis <35.005495> speed <100.000000> * SPEED_KOEF;
		turn middleleg1 to x-axis <0.000000> speed <50.000000> * SPEED_KOEF;
		turn upperleg2 to x-axis <-20.000000> speed <100.000000> * SPEED_KOEF;
		turn middleleg2 to x-axis <15.000000> speed <50.000000> * SPEED_KOEF;
		sleep 250 / SPEED_KOEF;
		move hip to y-axis [0.000000] speed [4.000000] * SPEED_KOEF;
		sleep 200 / SPEED_KOEF;
		move hip to y-axis [2.000000] speed [4.000000] * SPEED_KOEF;
		turn hip to z-axis <-2.000000> speed <16.000000> * SPEED_KOEF;
	}
}

transform()
{
	sleep 150;
}

reform()
{
	sleep 150;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hip;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	Func_Var_1 = 1;
	while( TRUE )
	{
		if( Static_Var_8 == 2 AND ( !Static_Var_4 ) )
		{
			call-script transform();
			Static_Var_4 = 1;
			Func_Var_1 = 1;
		}
		if( ( ( Static_Var_4 AND Static_Var_8 ) == 1 OR Static_Var_8 ) == 4 )
		{
			call-script reform();
			Static_Var_4 = 0;
			Func_Var_1 = 1;
		}
		if( bMoving )
		{
			Static_Var_9 = get HEALTH;
			call-script walk_1();
			Func_Var_1 = 1;
		}
		if( bMoving )
		{
			Static_Var_9 = get HEALTH;
			call-script walk_2();
			Func_Var_1 = 1;
		}
		if( !bMoving )
		{
			Static_Var_3 = 1;
			if( Func_Var_1 )
			{
				turn middleleg1 to x-axis <0.000000> speed <50.000000>;
				turn middleleg2 to x-axis <0.000000> speed <50.000000>;
				turn upperleg2 to x-axis <0.000000> speed <50.000000>;
				turn upperleg1 to x-axis <0.000000> speed <50.000000>;
				turn body to x-axis <0.000000> speed <30.000000>;
				move hip to y-axis [0.000000] speed [30.000000];
				turn hip to z-axis <0.000000> speed <30.000000>;
				wait-for-turn body around x-axis;
				turn body to x-axis <10.000000> speed <50.000000>;
				turn arms to x-axis <-10.000000> speed <50.000000>;
				wait-for-turn body around x-axis;
				turn body to x-axis <-3.000000> speed <50.000000>;
				wait-for-turn body around x-axis;
				turn body to x-axis <0.000000> speed <50.000000>;
				turn arms to x-axis <0.000000> speed <50.000000>;
				wait-for-turn arms around x-axis;
				wait-for-turn body around x-axis;
				if( !Static_Var_10 )
				{
					emit-sfx 259 from Guncase1;
					emit-sfx 259 from Guncase2;
					emit-sfx 259 from body;
				}
				move Guncase1 to x-axis [0.000000] speed [50.000000];
				move Guncase2 to x-axis [0.000000] speed [50.000000];
				Func_Var_1 = 0;
			}
			sleep 100;
		}
	}
}

Create()
{
	hide rflare;
	hide lflare;
	hide wreck1;
	hide wreck2;
	hide wreck3;
	hide firepoint1;
	hide firepoint2;
	dont-shade rflare;
	dont-shade lflare;
	Static_Var_10 = 0;
	gun_1 = base;
	gun_2 = base;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	Static_Var_7 = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_8 = Func_Var_1;
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_8 == 3 )
		{
			emit-sfx 259 from foot1;
			emit-sfx 259 from foot2;
			emit-sfx 259 from body;
			Static_Var_10 = 1;
		}
		if( Static_Var_8 == 2 )
		{
			emit-sfx 259 from foot1;
			emit-sfx 259 from foot2;
			emit-sfx 3 from lowerleg1;
			emit-sfx 3 from lowerleg2;
			emit-sfx 3 from body;
			Static_Var_10 = 0;
		}
		if( Static_Var_8 == 1 )
		{
			emit-sfx 3 from foot1;
			emit-sfx 3 from foot2;
			Static_Var_10 = 0;
		}
		sleep 250;
	}
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
}

RestoreAfterDelay()
{
	sleep Static_Var_7;
	move Guncase1 to x-axis [0.000000] speed [50.000000];
	move Guncase2 to x-axis [0.000000] speed [50.000000];
	turn arms to y-axis <0.000000> speed <225.000000>;
	turn arms to x-axis <0.000000> speed <50.000000>;
	turn body to y-axis <0.000000> speed <100.000000>;
	wait-for-turn arms around y-axis;
	wait-for-turn body around y-axis;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	//move Guncase1 to x-axis [-3.000000] speed [70.000000];
	//move Guncase2 to x-axis [3.000000] speed [70.000000];
	//move Guncase1 to x-axis [-2.000000] speed [50.000000];
	//move Guncase2 to x-axis [2.000000] speed [50.000000];
	//if( Static_Var_10 )
	//{
		//emit-sfx 259 from Guncase1;
		//emit-sfx 259 from Guncase2;
		//emit-sfx 259 from Guncase1;
		//emit-sfx 259 from Guncase2;
	//}
	turn body to y-axis heading speed <273.000000>;
	//turn arms to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn body around y-axis;
	//wait-for-turn arms around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	//move arms to z-axis [-2.000000] now;
	show lflare;
	sleep 150;
	hide lflare;
	//move arms to z-axis [0.000000] speed [10.000000];
}

QueryPrimary(piecenum)
{
	piecenum = lflare;
}

AimFromPrimary(piecenum)
{
	piecenum = arms;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	//move Guncase1 to x-axis [-3.000000] speed [70.000000];
	//move Guncase2 to x-axis [3.000000] speed [70.000000];
	//move Guncase1 to x-axis [-2.000000] speed [50.000000];
	//move Guncase2 to x-axis [2.000000] speed [50.000000];
	//if( Static_Var_10 )
	//{
		//emit-sfx 259 from Guncase1;
		//emit-sfx 259 from Guncase2;
		//emit-sfx 259 from Guncase1;
		//emit-sfx 259 from Guncase2;
	//}
	turn body to y-axis heading speed <273.000000>;
	//turn arms to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn body around y-axis;
	//wait-for-turn arms around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	//move arms to z-axis [-2.000000] now;
	show rflare;
	sleep 150;
	hide rflare;
	//move arms to z-axis [0.000000] speed [10.000000];
}

QuerySecondary(piecenum)
{
	piecenum = rflare;
}

AimFromSecondary(piecenum)
{
	piecenum = arms;
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

SweetSpot(piecenum)
{
	piecenum = hip;
}

Killed(severity, corpsetype)
{
	hide rflare;
	hide lflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hip type BITMAPONLY | BITMAP2;
		explode upperleg1 type BITMAPONLY | BITMAP3;
		explode middleleg1 type BITMAPONLY | BITMAP3;
		explode lowerleg1 type BITMAPONLY | BITMAP2;
		explode Guncase1 type FALL | BITMAP3;
		explode barrel1 type FALL | BITMAP4;
		explode foot1 type FALL | BITMAP5;
		explode upperleg2 type BITMAPONLY | BITMAP3;
		explode middleleg2 type BITMAPONLY | BITMAP3;
		explode lowerleg2 type BITMAPONLY | BITMAP2;
		explode foot2 type FALL | BITMAP5;
		explode Guncase2 type BITMAPONLY | BITMAP3;
		explode barrel2 type BITMAPONLY | BITMAP4;
		explode body type BITMAPONLY | BITMAP1;
		explode arms type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hip type BITMAPONLY | BITMAP2;
		explode upperleg1 type BITMAPONLY | BITMAP2;
		explode middleleg1 type BITMAPONLY | BITMAP3;
		explode lowerleg1 type BITMAPONLY | BITMAP2;
		explode foot1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode Guncase1 type FALL | BITMAP2;
		explode barrel1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode upperleg2 type BITMAPONLY | BITMAP2;
		explode middleleg2 type BITMAPONLY | BITMAP3;
		explode lowerleg2 type BITMAPONLY | BITMAP2;
		explode foot2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode Guncase2 type FALL | BITMAP2;
		explode barrel2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode body type BITMAPONLY | BITMAP1;
		explode arms type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hip type BITMAPONLY | BITMAP2;
		explode upperleg1 type BITMAPONLY | BITMAP2;
		explode middleleg1 type BITMAPONLY | BITMAP3;
		explode lowerleg1 type BITMAPONLY | BITMAP2;
		explode foot1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Guncase1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode upperleg2 type BITMAPONLY | BITMAP2;
		explode middleleg2 type BITMAPONLY | BITMAP3;
		explode lowerleg2 type BITMAPONLY | BITMAP2;
		explode foot2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode Guncase2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode barrel2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode body type BITMAPONLY | BITMAP1;
		explode arms type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode hip type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode upperleg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode middleleg1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lowerleg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode foot1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode Guncase1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel1 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode upperleg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode middleleg2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lowerleg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode foot2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode Guncase2 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode body type BITMAPONLY | BITMAP1;
	explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
