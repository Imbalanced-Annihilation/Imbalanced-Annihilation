#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, head_weapon, droppos, Rweapon, firer1, firer2, Lweapon, firel1,
       firel2;

static-var  gun, Static_Var_2;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_2 ) )
	{
		Static_Var_2 = 1;
		turn base to z-axis <240.000000> speed <135.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.000000> speed <200.000000>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <135.000000>;
		Static_Var_2 = 0;
	}
}

Create()
{
	gun = head_weapon;
	Static_Var_2 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1500;
	}
	start-script SmokeUnit();
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun == 1 )
	{
		piecenum = firer1;
		return (0);
	}
	if( gun == 2 )
	{
		piecenum = firel1;
		return (0);
	}
	if( gun == 3 )
	{
		piecenum = firer2;
		return (0);
	}
	if( gun == 4 )
	{
		piecenum = firel2;
		return (0);
	}
}

FirePrimary()
{
	/*if( gun == 1 )
	{
		gun = droppos;
		return (0);
	}
	if( gun == 2 )
	{
		gun = Rweapon;
		return (0);
	}
	if( gun == 3 )
	{
		gun = firer1;
		return (0);
	}
	if( gun == 4 )
	{
		gun = head_weapon;
		return (0);
	}*/
	gun = droppos;	sleep 150;
	gun = Rweapon;	sleep 150;
	gun = firer1;	sleep 150;
	gun = head_weapon;
	return(0);
}

QuerySecondary(piecenum)
{
	piecenum = droppos;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode head_weapon type BITMAPONLY | BITMAP1;
		explode droppos type BITMAPONLY | BITMAP1;
		explode Rweapon type BITMAPONLY | BITMAP1;
		explode firer1 type BITMAPONLY | BITMAP1;
		explode firer2 type BITMAPONLY | BITMAP1;
		explode Lweapon type BITMAPONLY | BITMAP1;
		explode firel1 type BITMAPONLY | BITMAP1;
		explode firel2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode head_weapon type SHATTER | BITMAP4;
		explode droppos type SHATTER | BITMAP4;
		explode Rweapon type SHATTER | BITMAP4;
		explode firer1 type SHATTER | BITMAP4;
		explode firer2 type SHATTER | BITMAP4;
		explode Lweapon type SHATTER | BITMAP4;
		explode firel1 type SHATTER | BITMAP4;
		explode firel2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode head_weapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode droppos type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode firer1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode firer2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Lweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode firel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode firel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode head_weapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode droppos type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode firer1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode firer2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Lweapon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode firel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode firel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
