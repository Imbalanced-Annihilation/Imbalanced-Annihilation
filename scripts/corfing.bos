#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, turret, base, collar, reloader, launcher,
       tube1, tube2, tube3;

static-var  RestoreDelay, bAiming, gun;

// Signal definitions
#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <55.021978>;
	turn base to x-axis Func_Var_1 speed <55.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.016484>;
	turn base to x-axis <0.000000> speed <30.016484>;
	return (0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.021978>;
	turn base to z-axis anglez speed <50.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	bAiming = FALSE;
	gun = flare1;
	RestoreDelay = 6000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	RestoreDelay = Func_Var_1 * 3;
	return (0);
}

RestoreAfterDelay()
{
	sleep RestoreDelay;
	turn turret to y-axis <0.000000> speed <120.043956>;
	turn launcher to x-axis <0.000000> speed <120.043956>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <120.043956>;
	turn launcher to x-axis <0.000000> - pitch speed <120.043956>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	while( gun )
	{
		//wait-for-move tube1 along z-axis;
		//wait-for-move tube2 along z-axis;
		//wait-for-move tube3 along z-axis;
		bAiming = FALSE;
		gun = flare1;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( bAiming == 0 )
	{
		show flare1;
		move tube1 to z-axis [-5.000000] speed [500.000000];
		sleep 150;
		hide flare1;
		move tube1 to z-axis [0.000000] speed [1.000000];
	}
	if( bAiming == 1 )
	{
		show flare2;
		move tube2 to z-axis [-5.000000] speed [500.000000];
		sleep 150;
		hide flare2;
		move tube2 to z-axis [0.000000] speed [1.000000];
	}
	if( bAiming == 2 )
	{
		gun = flare2;
		show flare1;
		move tube3 to z-axis [-5.000000] speed [500.000000];
		sleep 150;
		hide flare1;
		move tube3 to z-axis [0.000000] speed [1.000000];
	}
	++bAiming;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( bAiming == 1 )
	{
		piecenum = flare1;
	}
	if( bAiming == 2 )
	{
		piecenum = flare2;
	}
	if( bAiming == 3 )
	{
		piecenum = flare3;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type BITMAPONLY | BITMAP3;
		explode collar type BITMAPONLY | BITMAP3;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode reloader type FALL | SMOKE | FIRE | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type FALL | BITMAP3;
		explode collar type FALL | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode reloader type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP2;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode collar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type SHATTER | BITMAP4;
		explode reloader type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP2;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode collar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode reloader type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
