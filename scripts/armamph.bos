#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, flare, rmispoint, lmispoint, lhippivot, rhippivot, rupleg, rfoot,
       lupleg, lleg, lfoot, rleg, lasturret, misturret, pontoons, wake1,
       wake2, wake3, wake4, lasbarrel;

static-var  bMoving, bAiming, Static_Var_3, Static_Var_4, gun_2,
            restore_delay, Static_Var_7,
            walkCycle, walkSpeed, walkAccel;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8

walk()
{
	return (0);
}

walklegs()
{
	if (walkCycle == 0)
	{
		walkCycle = 1;
		walkSpeed = <300.000000>;
		walkAccel = <-300.000000>;
	}
	else
	{
		walkCycle = 0;
		walkSpeed = <-300.000000>;
		walkAccel = <300.000000>;
	}
	spin lupleg around x-axis speed walkSpeed accelerate walkAccel;
	spin rupleg around x-axis speed (-1)*walkSpeed accelerate (-1)*walkAccel;
	sleep 200;
	stop-spin lupleg around x-axis;
	stop-spin rupleg around x-axis;
	spin rupleg around x-axis speed walkSpeed accelerate walkAccel;
	spin lupleg around x-axis speed (-1)*walkSpeed accelerate (-1)*walkAccel;
	sleep 200;
	stop-spin lupleg around x-axis;
	stop-spin rupleg around x-axis;
	turn lupleg to x-axis <0.000000> now;
	turn rupleg to x-axis <0.000000> now;
	return (0);
}

transform()
{
	if( TRUE )
	{
		move lhippivot to z-axis [0.000000] now;
		move rhippivot to z-axis [0.000000] now;
		move rfoot to y-axis [0.000000] now;
		move rfoot to y-axis [0.349994] speed [2.287579];
		move rfoot to z-axis [0.000000] now;
		move rfoot to z-axis [0.900000] speed [5.882355];
		move lfoot to y-axis [0.000000] now;
		move lfoot to y-axis [0.299994] speed [1.960779];
		move lfoot to z-axis [0.000000] now;
		move lfoot to z-axis [0.800000] speed [5.228754];
		turn rfoot to x-axis <0.000000> now;
		turn rfoot to x-axis <47.824176> speed <312.571429>;
		turn lfoot to x-axis <0.000000> now;
		turn lfoot to x-axis <49.582418> speed <324.065934>;
		sleep 153;
	}
	if( TRUE )
	{
		move rleg to y-axis [0.450000] speed [1.778650];
		move rleg to z-axis [0.800000] speed [3.162054];
		move lleg to y-axis [0.450000] speed [1.778650];
		move lleg to z-axis [0.750000] speed [2.964423];
		turn rleg to x-axis <29.538462> speed <116.752747>;
		turn lleg to x-axis <28.835165> speed <113.972527>;
		sleep 253;
	}
	if( TRUE )
	{
		move lhippivot to x-axis [1.099994] speed [2.540411];
		move lhippivot to y-axis [-2.900000] speed [6.697455];
		move rhippivot to x-axis [-1.100000] speed [2.540411];
		move rhippivot to y-axis [-2.900000] speed [6.697455];
		turn rupleg to z-axis <90.021978> speed <207.901099>;
		turn lupleg to z-axis <-90.021978> speed <207.901099>;
		sleep 433;
	}
	if( TRUE )
	{
		move lhippivot to z-axis [2.899994] speed [3.141925];
		move rhippivot to z-axis [2.899994] speed [3.141925];
		turn lhippivot to y-axis <-90.021978> speed <97.527473>;
		turn rhippivot to y-axis <90.021978> speed <97.527473>;
		sleep 923;
	}
	if( TRUE )
	{
		turn body to x-axis <-8.769231> speed <50.708791>;
		sleep 173;
	}
	if( TRUE )
	{
		turn body to x-axis <0.000000> speed <120.181319>;
		sleep 73;
	}
	sleep 73;
}

reform()
{
	if( TRUE )
	{
		move body to y-axis [0.000000] now;
		move body to y-axis [2.200000] speed [9.777777];
		move lhippivot to x-axis [1.099994] now;
		move lhippivot to x-axis [0.000000] speed [4.888879];
		move lhippivot to y-axis [-2.900000] now;
		move lhippivot to y-axis [0.000000] speed [12.888885];
		move lhippivot to z-axis [2.899994] now;
		move lhippivot to z-axis [3.350000] speed [2.000024];
		move rhippivot to x-axis [-1.100000] now;
		move rhippivot to x-axis [0.000000] speed [4.888885];
		move rhippivot to y-axis [-2.900000] now;
		move rhippivot to y-axis [0.000000] speed [12.888885];
		move rhippivot to z-axis [2.899994] now;
		move rhippivot to z-axis [3.350000] speed [2.000024];
		move rleg to y-axis [0.450000] now;
		move rleg to y-axis [0.400000] speed [0.222217];
		move rleg to z-axis [0.800000] now;
		move rleg to z-axis [0.700000] speed [0.444440];
		move rfoot to y-axis [0.349994] now;
		move rfoot to y-axis [0.350000] speed [0.000024];
		move rfoot to z-axis [0.900000] now;
		move rfoot to z-axis [1.050000] speed [0.666663];
		move lleg to y-axis [0.450000] now;
		move lleg to z-axis [0.750000] now;
		move lleg to z-axis [0.750000] speed [0.000000];
		move lfoot to y-axis [0.299994] now;
		move lfoot to y-axis [0.250000] speed [0.222192];
		move lfoot to z-axis [0.800000] now;
		move lfoot to z-axis [0.849994] speed [0.222217];
		turn body to x-axis <0.000000> now;
		turn body to x-axis <-5.274725> speed <23.439560>;
		turn lhippivot to y-axis <-90.021978> now;
		turn lhippivot to y-axis <-90.021978> speed <0.000000>;
		turn rhippivot to y-axis <90.021978> now;
		turn rupleg to z-axis <90.021978> now;
		turn rupleg to z-axis <0.000000> speed <400.093407>;
		turn rleg to x-axis <29.538462> now;
		turn rleg to x-axis <29.368132> speed <0.736264>;
		turn rfoot to x-axis <47.824176> now;
		turn rfoot to x-axis <38.906593> speed <39.626374>;
		turn lupleg to z-axis <-90.021978> now;
		turn lupleg to z-axis <0.000000> speed <400.093407>;
		turn lleg to x-axis <28.835165> now;
		turn lleg to x-axis <29.752747> speed <4.076923>;
		turn lfoot to x-axis <49.582418> now;
		turn lfoot to x-axis <40.428571> speed <40.659341>;
		sleep 225;
	}
	if( TRUE )
	{
		move body to y-axis [2.400000] speed [0.778204];
		move lhippivot to z-axis [0.000000] speed [13.035016];
		move rhippivot to z-axis [0.000000] speed [13.035016];
		turn body to x-axis <-3.164835> speed <8.208791>;
		sleep 257;
	}
	if( TRUE )
	{
		move body to y-axis [2.150000] speed [1.196161];
		turn body to x-axis <0.000000> speed <15.137363>;
		turn lhippivot to y-axis <0.000000> speed <430.725275>;
		turn rhippivot to y-axis <0.000000> speed <430.725275>;
		sleep 209;
	}
	if( TRUE )
	{
		move body to y-axis [2.650000] speed [3.424658];
		move rleg to y-axis [0.000000] speed [2.739722];
		move lleg to y-axis [0.000000] speed [3.082184];
		sleep 146;
	}
	if( TRUE )
	{
		move body to y-axis [1.150000] speed [18.750006];
		move rleg to z-axis [0.000000] speed [8.749994];
		move lleg to z-axis [0.000000] speed [9.375000];
		turn body to x-axis <1.054945> speed <13.186813>;
		turn rleg to x-axis <0.000000> speed <367.142857>;
		turn lleg to x-axis <0.000000> speed <371.912088>;
		sleep 80;
	}
	if( TRUE )
	{
		move body to y-axis [0.750000] speed [2.898560];
		move rfoot to y-axis [0.000000] speed [2.536230];
		move lfoot to y-axis [0.000000] speed [1.811591];
		turn body to x-axis <-3.164835> speed <30.576923>;
		sleep 138;
	}
	if( TRUE )
	{
		move body to y-axis [0.000000] speed [5.905505];
		move rfoot to z-axis [0.000000] speed [8.267712];
		move lfoot to z-axis [0.000000] speed [6.692908];
		turn body to x-axis <0.000000> speed <24.917582>;
		turn rfoot to x-axis <0.000000> speed <306.357143>;
		turn lfoot to x-axis <0.000000> speed <318.373626>;
		sleep 127;
	}
	if( TRUE )
	{
		move body to y-axis [-1.100000] speed [10.576923];
		move rupleg to y-axis [0.600000] speed [5.769226];
		move lupleg to y-axis [0.500000] speed [4.807690];
		turn body to x-axis <5.978022> speed <57.478022>;
		turn rupleg to x-axis <9.142857> speed <87.912088>;
		turn rleg to x-axis <-16.175824> speed <155.532967>;
		turn lupleg to x-axis <17.934066> speed <172.439560>;
		turn lleg to x-axis <-25.670330> speed <246.829670>;
		sleep 104;
	}
	if( TRUE )
	{
		move body to y-axis [0.000000] speed [11.702124];
		move rupleg to y-axis [0.000000] speed [6.382977];
		move lupleg to y-axis [0.000000] speed [5.319147];
		turn body to x-axis <0.703297> speed <56.109890>;
		turn rupleg to x-axis <0.000000> speed <97.263736>;
		turn rleg to x-axis <0.000000> speed <172.082418>;
		turn lupleg to x-axis <0.000000> speed <190.785714>;
		turn lleg to x-axis <0.000000> speed <273.087912>;
		sleep 94;
	}
	//sleep 74;
}

swim()
{
	if( TRUE )
	{
		move lhippivot to x-axis [1.099994] now;
		move lhippivot to y-axis [-2.900000] now;
		move lhippivot to z-axis [2.899994] now;
		move rhippivot to x-axis [-1.100000] now;
		move rhippivot to y-axis [-2.900000] now;
		move rhippivot to z-axis [2.899994] now;
		move rleg to y-axis [0.450000] now;
		move rleg to z-axis [0.800000] now;
		move rfoot to y-axis [0.349994] now;
		move rfoot to z-axis [0.900000] now;
		move lleg to y-axis [0.450000] now;
		move lleg to z-axis [0.750000] now;
		move lfoot to y-axis [0.299994] now;
		move lfoot to z-axis [0.800000] now;
		turn lhippivot to y-axis <-90.021978> now;
		turn rhippivot to y-axis <90.021978> now;
		turn rupleg to z-axis <90.021978> now;
		turn rleg to x-axis <29.538462> now;
		turn rfoot to x-axis <47.824176> now;
		turn lupleg to z-axis <-90.021978> now;
		turn lleg to x-axis <28.835165> now;
		turn lfoot to x-axis <49.582418> now;
		sleep 200;
	}
	sleep 10;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	Func_Var_1 = 1;
	while( TRUE )
	{
		if( Static_Var_7 == 2 AND ( !Static_Var_4 ) )
		{
			call-script transform();
			Static_Var_4 = 1;
			Func_Var_1 = 1;
		}
		if( Static_Var_4 AND Static_Var_7 == 1 OR Static_Var_7 == 4 )
		{
			call-script reform();
			Static_Var_4 = 0;
			Func_Var_1 = 1;
		}
		if( bMoving )
		{
			if( bAiming )
			{
				Static_Var_3 = 1;
				if( Static_Var_4 )
				{
					call-script swim();
				}
				if( !Static_Var_4 )
				{
					call-script walklegs();
				}
			}
			if( !bAiming )
			{
				Static_Var_3 = 0;
				if( Static_Var_4 )
				{
					call-script swim();
				}
				if( !Static_Var_4 )
				{
					//call-script walk();
					call-script walklegs();
				}
			}
			Func_Var_1 = 1;
		}
		if( !bMoving )
		{
			Static_Var_3 = 1;
			if( Func_Var_1 AND ( !Static_Var_4 ) )
			{
				move body to x-axis [0.000000] speed [1.000000];
				turn rupleg to x-axis <0.000000> speed <200.043956>;
				turn rleg to x-axis <0.000000> speed <200.043956>;
				turn rfoot to x-axis <0.000000> speed <200.043956>;
				turn lupleg to x-axis <0.000000> speed <200.043956>;
				turn lleg to x-axis <0.000000> speed <200.043956>;
				turn lfoot to x-axis <0.000000> speed <200.043956>;
				Func_Var_1 = 0;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	gun_2 = body;
	walkCycle = 0;
	hide flare;
	hide pontoons;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_7 == 2 OR Static_Var_7 == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
			emit-sfx 2 from wake3;
			emit-sfx 2 from wake4;
		}
		sleep 250;
	}
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_7 = Func_Var_1;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn lasturret to y-axis <0.000000> speed <90.021978>;
	turn lasturret to x-axis <0.000000> speed <90.021978>;
	turn misturret to y-axis <0.000000> speed <90.021978>;
	turn misturret to x-axis <0.000000> speed <90.021978>;
	wait-for-turn lasturret around y-axis;
	wait-for-turn lasturret around x-axis;
	wait-for-turn misturret around y-axis;
	wait-for-turn misturret around x-axis;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn lasturret to y-axis heading speed <100.021978>;
	turn lasturret to x-axis <0.000000> - pitch speed <100.021978>;
	wait-for-turn lasturret around y-axis;
	wait-for-turn lasturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = lasturret;
}

AimFromSecondary(piecenum)
{
	piecenum = misturret;
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = lmispoint;
	}
	if( gun_2 == 1 )
	{
		piecenum = rmispoint;
	}
}

FireSecondary()
{
	gun_2 = !gun_2;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn misturret to y-axis heading speed <100.021978>;
	turn misturret to x-axis <0.000000> - pitch speed <100.021978>;
	wait-for-turn misturret around y-axis;
	wait-for-turn misturret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode lasbarrel type BITMAPONLY | BITMAP2;
		explode lasturret type BITMAPONLY | BITMAP3;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lleg type BITMAPONLY | BITMAP5;
		explode lmispoint type BITMAPONLY | BITMAP1;
		explode lupleg type BITMAPONLY | BITMAP2;
		explode misturret type BITMAPONLY | BITMAP3;
		explode pontoons type BITMAPONLY | BITMAP3;
		explode rfoot type BITMAPONLY | BITMAP4;
		explode rleg type BITMAPONLY | BITMAP5;
		explode rmispoint type BITMAPONLY | BITMAP1;
		explode rupleg type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		explode wake3 type BITMAPONLY | BITMAP5;
		explode wake4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode lasbarrel type FALL | BITMAP2;
		explode lasturret type FALL | BITMAP3;
		explode lfoot type FALL | BITMAP4;
		explode lleg type FALL | BITMAP5;
		explode lmispoint type FALL | BITMAP1;
		explode lupleg type FALL | BITMAP2;
		explode misturret type SHATTER | BITMAP3;
		explode pontoons type BITMAPONLY | BITMAP3;
		explode rfoot type FALL | BITMAP4;
		explode rleg type FALL | BITMAP5;
		explode rmispoint type FALL | BITMAP1;
		explode rupleg type FALL | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		explode wake3 type FALL | BITMAP5;
		explode wake4 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | BITMAP1;
		explode lasbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lasturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lupleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode misturret type SHATTER | BITMAP3;
		explode pontoons type BITMAPONLY | BITMAP3;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rupleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | BITMAP1;
	explode lasbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lasturret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lupleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode misturret type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode pontoons type BITMAPONLY | BITMAP3;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rmispoint type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rupleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wake4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
}
